{"version":3,"sources":["components/Mapbox/Mapbox.styled.tsx","components/MapboxApi/MapboxApiContext.tsx","components/MapboxPopup/MapboxPopup.tsx","components/MapboxApi/MapboxApiProvider.tsx","constants/index.ts","components/MapboxSource/MapboxSource.tsx","components/MapboxCluster/MapboxCluster.tsx","components/MapboxApi/MapboxApi.tsx","components/Mapbox/Mapbox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MapboxContainer","styled","div","MapboxMap","MapboxApiContext","React","createContext","MapboxPopup","useContext","map","popup","useEffect","on","e","getCanvas","style","cursor","coordinates","features","geometry","slice","description","properties","title","Math","abs","lngLat","lng","setLngLat","setHTML","addTo","remove","foursquare","Foursquare","MapboxApiProvider","children","mapboxgl","mapContainer","mapRef","current","useMemo","Map","accessToken","container","center","zoom","classList","add","Popup","closeButton","closeOnClick","useState","venues","setVenues","Provider","value","updateVenues","getCenter","lat","sw","getBounds","getSouthWest","nw","getNorthWest","radius","floor","distance","units","payload","getVenuesSearchAsync","request","ll","min","limit","categoryId","getVenues","then","response","MapboxSource","addSource","type","data","cluster","clusterMaxZoom","clusterRadius","venue","location","name","existingSource","getSource","setData","MapboxCluster","addLayer","id","source","filter","paint","layout","queryRenderedFeatures","point","layers","clusterId","cluster_id","getClusterExpansionZoom","err","easeTo","MapboxApi","Mapbox","mounted","setMounted","setMapboxgl","useRef","ref","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a98b268.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const MapboxContainer = styled.div`\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport const MapboxMap = styled.div`\n  position: absolute !important;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n`;\n","import React from 'react';\nimport { NVenue } from 'ts-foursquare/types';\n\nexport type MapboxEvents = mapboxgl.MapboxEvent | mapboxgl.MapBoxZoomEvent | mapboxgl.MapMouseEvent;\n\ntype MapboxApiContext = {\n  updateVenues: (e: MapboxEvents) => void;\n  venues: NVenue.IVenue[];\n  map: mapboxgl.Map;\n  popup: mapboxgl.Popup;\n};\n\nexport const MapboxApiContext = React.createContext({} as MapboxApiContext);\n","import React from 'react';\nimport { MapboxApiContext } from '../MapboxApi/MapboxApiContext';\n\nconst MapboxPopup = () => {\n  const { map, popup } = React.useContext(MapboxApiContext);\n\n  React.useEffect(() => {\n    map.on('load', () => {\n      // When a click event occurs on a feature in the places layer, open a popup at the\n      // location of the feature, with description HTML from its properties.\n      map.on('mouseenter', 'unclustered-point', function(e: any) {\n        map.getCanvas().style.cursor = 'pointer';\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var description = e.features[0].properties.title;\n\n        // Ensure that if the map is zoomed out such that multiple\n        // copies of the feature are visible, the popup appears\n        // over the copy being pointed to.\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        popup\n          .setLngLat(coordinates)\n          .setHTML(description)\n          .addTo(map);\n      });\n\n      // Change it back to a pointer when it leaves.\n      map.on('mouseleave', 'unclustered-point', function() {\n        map.getCanvas().style.cursor = '';\n        popup.remove();\n      });\n    });\n  }, [map, popup]);\n\n  return null;\n};\n\nexport default MapboxPopup;\n","import React from 'react';\nimport { MapboxApiContext, MapboxEvents } from './MapboxApiContext';\nimport { getVenuesSearchAsync } from 'ts-foursquare';\nimport Foursquare from '@foursquare/foursquare-places';\nimport {\n  FOURSQUARE_CLIENT_SECRET,\n  FOURSQUARE_CLIENT_ID,\n  MAPBOX_ACCESS_TOKEN,\n  MAP_LOADED_CLASSNAME,\n} from '../../constants';\nimport { NVenue } from 'ts-foursquare/types';\nimport { distance } from '@turf/turf';\n\nconst foursquare = new Foursquare(FOURSQUARE_CLIENT_ID, FOURSQUARE_CLIENT_SECRET);\n\nconst MapboxApiProvider = ({\n  children,\n  mapboxgl,\n  mapRef: { current: mapContainer },\n}: {\n  children: React.ReactNode;\n  mapboxgl: any;\n  mapRef: { current: HTMLDivElement };\n}) => {\n  const map = React.useMemo(\n    () =>\n      new mapboxgl.Map({\n        accessToken: MAPBOX_ACCESS_TOKEN,\n        container: mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [-0.118092, 51.509865],\n        zoom: 9,\n      } as mapboxgl.MapboxOptions),\n    [mapContainer, mapboxgl.Map]\n  );\n\n  React.useEffect(() => {\n    // For E2E tests to know that map is loaded\n    map.on('load', () => mapContainer.classList.add(MAP_LOADED_CLASSNAME));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  const popup = React.useMemo(\n    () => new mapboxgl.Popup({ closeButton: false, closeOnClick: true } as mapboxgl.PopupOptions),\n    [mapboxgl.Popup]\n  );\n\n  const [venues, setVenues] = React.useState([] as NVenue.IVenue[]);\n\n  // @ee https://kentcdodds.com/blog/usememo-and-usecallback\n  const updateVenues = (e: MapboxEvents) => {\n    const { lng, lat } = map.getCenter();\n    const sw = map.getBounds().getSouthWest();\n    const nw = map.getBounds().getNorthWest();\n    const radius = Math.floor(distance([sw.lng, sw.lat], [nw.lng, nw.lat], { units: 'meters' }) / 2);\n    const { payload } = getVenuesSearchAsync.request({\n      ll: `${lat},${lng}`,\n      radius: Math.min(radius, 100000),\n      limit: 50,\n      // @see https://developer.foursquare.com/docs/resources/categories\n      categoryId: [/* Park */ '4bf58dd8d48988d163941735', /* Arts & Entertainment */ '4d4b7104d754a06370d81259'],\n    });\n    foursquare.venues.getVenues(payload).then(({ response }: { response: NVenue.IResponse }) => {\n      const venues = response.venues;\n      setVenues(venues);\n    });\n  };\n\n  return (\n    <MapboxApiContext.Provider\n      value={{\n        venues,\n        updateVenues,\n        map,\n        popup,\n      }}>\n      {children}\n    </MapboxApiContext.Provider>\n  );\n};\n\nexport default MapboxApiProvider;\n","export const MAPBOX_ACCESS_TOKEN =\n  'pk.eyJ1IjoieXVyaW1hbGFraG92IiwiYSI6ImNpdHB5YXo4aDAwMWEzM3BmaHR2dHlld3AifQ.42Ln8kmZBnERNy04ZiQN5Q';\nexport const FOURSQUARE_CLIENT_ID = 'L2YJ2X5F1E1C4DQJF4TLSCBCTLAUUUEXHMDGH3WPNNRNFLVU';\nexport const FOURSQUARE_CLIENT_SECRET = 'GENU2POR33WYGC5WBG0M1RYUIGYBIH5UPVA52Q32WNAAN0JU';\nexport const MAP_LOADED_CLASSNAME = 'loaded';\n","import React from 'react';\nimport { MapboxApiContext } from '../MapboxApi/MapboxApiContext';\nimport { FeatureCollection } from 'geojson';\n\nexport const SOURCE_ID = 'venues';\n\nconst MapboxSource = () => {\n  const { map, venues, updateVenues } = React.useContext(MapboxApiContext);\n\n  React.useEffect(() => {\n    // Add source to mapbox\n    map.on('load', () => {\n      map.addSource(SOURCE_ID, {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: [],\n        },\n        cluster: true,\n        clusterMaxZoom: 13,\n        clusterRadius: 50,\n      });\n    });\n\n    // Define when new venues should be requested\n    map.on('load', updateVenues);\n    map.on('zoomend', updateVenues);\n    map.on('dragend', updateVenues);\n  }, [map, updateVenues]);\n\n  // Process new venues\n  const data: GeoJSON.FeatureCollection = {\n    type: 'FeatureCollection',\n    features: venues.map((venue) => ({\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [venue.location.lng, venue.location.lat],\n      },\n      properties: {\n        title: venue.name,\n      },\n    })),\n  };\n\n  // Update source data\n  const existingSource = map.getSource(SOURCE_ID) as mapboxgl.GeoJSONSource;\n  if (existingSource) {\n    existingSource.setData(data);\n  }\n\n  return null;\n};\n\nexport default MapboxSource;\n","import React from 'react';\nimport { MapboxApiContext } from '../MapboxApi/MapboxApiContext';\nimport { SOURCE_ID } from '../MapboxSource/MapboxSource';\n\nconst MapboxCluster = () => {\n  const { map } = React.useContext(MapboxApiContext);\n\n  React.useEffect(() => {\n    map.on('load', () => {\n      map.addLayer({\n        id: 'clusters',\n        type: 'circle',\n        source: SOURCE_ID,\n        filter: ['has', 'point_count'],\n        paint: {\n          // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n          // with three steps to implement three types of circles:\n          //   * Blue, 20px circles when point count is less than 10\n          //   * Yellow, 30px circles when point count is between 10 and 50\n          //   * Pink, 40px circles when point count is greater than or equal to 50\n          'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 10, '#f1f075', 50, '#f28cb1'],\n          'circle-radius': ['step', ['get', 'point_count'], 20, 10, 30, 50, 40],\n        },\n      });\n\n      map.addLayer({\n        id: 'cluster-count',\n        type: 'symbol',\n        source: SOURCE_ID,\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': '{point_count_abbreviated}',\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-size': 12,\n        },\n      });\n\n      map.addLayer({\n        id: 'unclustered-point',\n        type: 'circle',\n        source: SOURCE_ID,\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-radius': 4,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff',\n        },\n      });\n\n      // inspect a cluster on click\n      map.on('click', 'clusters', function(e) {\n        var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] }) as mapboxgl.MapboxGeoJSONFeature[];\n        var clusterId = features[0].properties!.cluster_id;\n        (map.getSource(SOURCE_ID) as mapboxgl.GeoJSONSource).getClusterExpansionZoom(clusterId, function(err, zoom) {\n          if (err) return;\n\n          map.easeTo({\n            center: (features[0].geometry as GeoJSON.Point).coordinates as any,\n            zoom: zoom,\n          });\n        });\n      });\n\n      map.on('mouseenter', 'clusters', function() {\n        map.getCanvas().style.cursor = 'pointer';\n      });\n      map.on('mouseleave', 'clusters', function() {\n        map.getCanvas().style.cursor = '';\n      });\n    });\n  }, [map]);\n\n  return null;\n};\n\nexport default MapboxCluster;\n","import React from 'react';\nimport MapboxPopup from '../MapboxPopup/MapboxPopup';\nimport MapboxApiProvider from './MapboxApiProvider';\nimport MapboxSource from '../MapboxSource/MapboxSource';\nimport MapboxCluster from '../MapboxCluster/MapboxCluster';\n\nconst MapboxApi = ({ mapboxgl, mapRef }: any) => {\n  return (\n    <MapboxApiProvider mapboxgl={mapboxgl} mapRef={mapRef}>\n      <MapboxSource />\n      <MapboxCluster />\n      <MapboxPopup />\n    </MapboxApiProvider>\n  );\n};\n\nexport default MapboxApi;\n","import React from 'react';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { MapboxContainer, MapboxMap } from './Mapbox.styled';\nimport MapboxApi from '../MapboxApi/MapboxApi';\n\nconst Mapbox = () => {\n  const [mounted, setMounted] = React.useState(false);\n  const [mapboxgl, setMapboxgl] = React.useState();\n  const mapRef = React.useRef<HTMLDivElement>(null!);\n  React.useEffect(() => {\n    import('mapbox-gl')\n      .then(setMapboxgl)\n      .then(() => setMounted(true));\n  }, []);\n  return (\n    <MapboxContainer>\n      <MapboxMap id=\"map\" ref={mapRef} />\n      {mounted ? <MapboxApi mapboxgl={mapboxgl} mapRef={mapRef} /> : null}\n    </MapboxContainer>\n  );\n};\n\nexport default Mapbox;\n","import React from 'react';\nimport Mapbox from './components/Mapbox/Mapbox';\n\nconst App = () => <Mapbox />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}